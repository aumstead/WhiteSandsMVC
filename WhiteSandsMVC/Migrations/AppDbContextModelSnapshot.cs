// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WhiteSandsMVC.Models;

namespace WhiteSandsMVC.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WhiteSandsMVC.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditCardExpiryMonth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditCardExpiryYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MattressPreference")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Mattress - Signature pocket spring (medium firmness)");

                    b.Property<string>("NameOnCreditCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumberCountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PillowPreference")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Pillows - Feather");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmokingPreference")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Non-smoking room");

                    b.Property<bool>("SubscribedToEmailList")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WhiteSandsMVC.Models.BillOfSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BillsOfSale");
                });

            modelBuilder.Entity("WhiteSandsMVC.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Adults")
                        .HasColumnType("tinyint");

                    b.Property<int>("BillOfSaleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Children")
                        .HasColumnType("tinyint");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Promo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BillOfSaleId");

                    b.HasIndex("GuestId");

                    b.HasIndex("RoomId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("WhiteSandsMVC.Models.FoodInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("FoodInterests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Restaurants & Bars"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Wine"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Brunch"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cooking classes"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Farm to table"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Local specialties"
                        });
                });

            modelBuilder.Entity("WhiteSandsMVC.Models.Guest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConfirmEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreditCardExpiryMonth")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CreditCardExpiryYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CreditCardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameOnCreditCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("SubscribedToEmailList")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("WhiteSandsMVC.Models.HealthInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("HealthInterests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fitness"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Spa"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Yoga"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Nature Excursions"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Skiing"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Golfing"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Diving"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Surfing"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Other water sports"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Horseback riding"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Meditation"
                        });
                });

            modelBuilder.Entity("WhiteSandsMVC.Models.LineItemCharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int>("BillOfSaleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BillOfSaleId");

                    b.ToTable("LineItemCharges");
                });

            modelBuilder.Entity("WhiteSandsMVC.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<string>("View")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = true,
                            RoomNumber = "1",
                            RoomTypeId = 1,
                            View = "Lagoon"
                        },
                        new
                        {
                            Id = 2,
                            Available = true,
                            RoomNumber = "2",
                            RoomTypeId = 1,
                            View = "Lagoon"
                        },
                        new
                        {
                            Id = 3,
                            Available = true,
                            RoomNumber = "3",
                            RoomTypeId = 1,
                            View = "Mt. Suthep"
                        },
                        new
                        {
                            Id = 4,
                            Available = true,
                            RoomNumber = "4",
                            RoomTypeId = 1,
                            View = "Mt. Suthep"
                        },
                        new
                        {
                            Id = 5,
                            Available = true,
                            RoomNumber = "5",
                            RoomTypeId = 2,
                            View = "Lagoon"
                        },
                        new
                        {
                            Id = 6,
                            Available = true,
                            RoomNumber = "6",
                            RoomTypeId = 2,
                            View = "Mt. Suthep"
                        },
                        new
                        {
                            Id = 7,
                            Available = true,
                            RoomNumber = "7",
                            RoomTypeId = 3,
                            View = "Lagoon"
                        },
                        new
                        {
                            Id = 8,
                            Available = true,
                            RoomNumber = "8",
                            RoomTypeId = 3,
                            View = "Mt. Suthep"
                        },
                        new
                        {
                            Id = 9,
                            Available = true,
                            RoomNumber = "100",
                            RoomTypeId = 4,
                            View = "Beach"
                        },
                        new
                        {
                            Id = 10,
                            Available = true,
                            RoomNumber = "201",
                            RoomTypeId = 4,
                            View = "Beach"
                        },
                        new
                        {
                            Id = 11,
                            Available = true,
                            RoomNumber = "302",
                            RoomTypeId = 4,
                            View = "Garden"
                        },
                        new
                        {
                            Id = 12,
                            Available = true,
                            RoomNumber = "402",
                            RoomTypeId = 4,
                            View = "Garden"
                        },
                        new
                        {
                            Id = 13,
                            Available = true,
                            RoomNumber = "102",
                            RoomTypeId = 5,
                            View = "Beach"
                        },
                        new
                        {
                            Id = 14,
                            Available = true,
                            RoomNumber = "500",
                            RoomTypeId = 5,
                            View = "Beach"
                        },
                        new
                        {
                            Id = 15,
                            Available = true,
                            RoomNumber = "501",
                            RoomTypeId = 5,
                            View = "Garden"
                        },
                        new
                        {
                            Id = 16,
                            Available = true,
                            RoomNumber = "600",
                            RoomTypeId = 5,
                            View = "Garden"
                        },
                        new
                        {
                            Id = 17,
                            Available = true,
                            RoomNumber = "880",
                            RoomTypeId = 8,
                            View = "Mt. Suthep"
                        },
                        new
                        {
                            Id = 18,
                            Available = true,
                            RoomNumber = "881",
                            RoomTypeId = 8,
                            View = "Mt.Suthep"
                        },
                        new
                        {
                            Id = 19,
                            Available = true,
                            RoomNumber = "882",
                            RoomTypeId = 7,
                            View = "Beach"
                        },
                        new
                        {
                            Id = 20,
                            Available = true,
                            RoomNumber = "883",
                            RoomTypeId = 7,
                            View = "Beach"
                        },
                        new
                        {
                            Id = 21,
                            Available = true,
                            RoomNumber = "884",
                            RoomTypeId = 6,
                            View = "Beach"
                        },
                        new
                        {
                            Id = 22,
                            Available = true,
                            RoomNumber = "885",
                            RoomTypeId = 6,
                            View = "Beach"
                        },
                        new
                        {
                            Id = 23,
                            Available = true,
                            RoomNumber = "886",
                            RoomTypeId = 6,
                            View = "Beach"
                        });
                });

            modelBuilder.Entity("WhiteSandsMVC.Models.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Bathroom")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Beds")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("ExtraBeds")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte>("MaxAdultCapacity")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MaxChildCapacity")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Occupancy")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("RoomSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bathroom = "One full bathroom",
                            Beds = "One king bed. One full sofa bed",
                            Category = 0,
                            ExtraBeds = "One full sofa bed",
                            Location = "Overwater bungalow",
                            MaxAdultCapacity = (byte)3,
                            MaxChildCapacity = (byte)2,
                            Name = "One-bedroom beach-view overwater bungalow",
                            Occupancy = "3 adults or 2 adults and 2 children (up to the age of 12)",
                            PhotoPath = "bungalow1.jpg",
                            Price = 300m,
                            RoomSize = "100 m2 (1,080 sq.ft.)"
                        },
                        new
                        {
                            Id = 2,
                            Bathroom = "Two full bathrooms",
                            Beds = "Two king beds. Two full sofa beds",
                            Category = 0,
                            ExtraBeds = "Two full sofa beds",
                            Location = "Overwater bungalow",
                            MaxAdultCapacity = (byte)6,
                            MaxChildCapacity = (byte)4,
                            Name = "Two-bedroom overwater bungalow suite",
                            Occupancy = "6 adults or 2 adults and 4 children (up to the age of 12)",
                            PhotoPath = "bungalow2.jpg",
                            Price = 500m,
                            RoomSize = "207 m2 (2,228 sq.ft.)"
                        },
                        new
                        {
                            Id = 3,
                            Bathroom = "Two full bathrooms",
                            Beds = "One king bed and two queen beds. Two full sofa beds",
                            Category = 0,
                            ExtraBeds = "Two full sofa beds",
                            Location = "Overwater bungalow",
                            MaxAdultCapacity = (byte)6,
                            MaxChildCapacity = (byte)4,
                            Name = "Two-bedroom overwater bungalow suite with plunge pool",
                            Occupancy = "6 adults or 2 adults and 4 children (up to the age of 12)",
                            PhotoPath = "bungalow3.jpg",
                            Price = 600m,
                            RoomSize = "207 m2 (2,228 sq.ft.)"
                        },
                        new
                        {
                            Id = 4,
                            Bathroom = "One full bathroom",
                            Beds = "One king bed. One rollaway",
                            Category = 1,
                            ExtraBeds = "One rollaway",
                            Location = "Floors 1-4",
                            MaxAdultCapacity = (byte)2,
                            MaxChildCapacity = (byte)1,
                            Name = "Deluxe beachfront room",
                            Occupancy = "2 adults or 2 adults and 1 child (up to the age of 12)",
                            PhotoPath = "beachfront1.jpg",
                            Price = 300m,
                            RoomSize = "59 m2 (640 sq.ft.)"
                        },
                        new
                        {
                            Id = 5,
                            Bathroom = "Two full bathrooms",
                            Beds = "One king bed. One full sofa bed",
                            Category = 2,
                            ExtraBeds = "One full sofa bed",
                            Location = "Floors 1, 5-6",
                            MaxAdultCapacity = (byte)3,
                            MaxChildCapacity = (byte)2,
                            Name = "Beachfront one-bedroom suite",
                            Occupancy = "3 adults or 2 adults and 2 children (up to the age of 12)",
                            PhotoPath = "beachfront2.jpg",
                            Price = 450m,
                            RoomSize = "130 m2 (1,400 sq.ft.)"
                        },
                        new
                        {
                            Id = 6,
                            Bathroom = "Two full bathrooms and one-half bathroom",
                            Beds = "Two king and two queen beds",
                            Category = 3,
                            ExtraBeds = "One rollaway",
                            Location = "Secluded, with pedestrian access to beach and main building",
                            MaxAdultCapacity = (byte)6,
                            MaxChildCapacity = (byte)4,
                            Name = "Three-bedroom villa estate with plunge pool",
                            Occupancy = "6 adults or 2 adults and 4 children (up to the age of 12)",
                            PhotoPath = "villa1.jpg",
                            Price = 1200m,
                            RoomSize = "500 m2 (5,380 sq.ft.)"
                        },
                        new
                        {
                            Id = 7,
                            Bathroom = "Two full bathrooms",
                            Beds = "One king and two queen beds. One full sofa bed",
                            Category = 3,
                            ExtraBeds = "One full sofa bed",
                            Location = "Beachfront, with pedestrian access to main building",
                            MaxAdultCapacity = (byte)5,
                            MaxChildCapacity = (byte)3,
                            Name = "Two-bedroom beachfront villa estate",
                            Occupancy = "5 adults or 2 adults and 3 children (up to the age of 12)",
                            PhotoPath = "villa2.jpg",
                            Price = 900m,
                            RoomSize = "300 m2 (3,228 sq.ft.)"
                        },
                        new
                        {
                            Id = 8,
                            Bathroom = "One full bathroom and one-half bathroom",
                            Beds = "One king bed. One full sofa bed",
                            Category = 3,
                            ExtraBeds = "One full sofa bed",
                            Location = "Beachfront, with pedestrian access to main building",
                            MaxAdultCapacity = (byte)3,
                            MaxChildCapacity = (byte)2,
                            Name = "One-bedroom beachfront villa estate",
                            Occupancy = "3 adults or 2 adults and 2 children (up to the age of 12)",
                            PhotoPath = "villa3.jpg",
                            Price = 600m,
                            RoomSize = "253 m2 (2,722 sq.ft.)"
                        });
                });

            modelBuilder.Entity("WhiteSandsMVC.Models.TravelInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TravelInterests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Couples Getaway"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Family Getaway"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Friends Getaway"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Solo Travel"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Beach Vacation"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Vacation Rental"
                        },
                        new
                        {
                            Id = 7,
                            Name = "City Escape"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Adventure Travel"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Art and Culture"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Shopping"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Sporting Events"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Culinary Travel"
                        });
                });

            modelBuilder.Entity("WhiteSandsMVC.Models.UserFoodInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FoodInterestId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FoodInterestId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFoodInterests");
                });

            modelBuilder.Entity("WhiteSandsMVC.Models.UserHealthInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HealthInterestId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("HealthInterestId");

                    b.HasIndex("UserId");

                    b.ToTable("UserHealthInterests");
                });

            modelBuilder.Entity("WhiteSandsMVC.Models.UserTravelInterest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TravelInterestId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TravelInterestId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTravelInterests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WhiteSandsMVC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WhiteSandsMVC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WhiteSandsMVC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WhiteSandsMVC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WhiteSandsMVC.Models.Booking", b =>
                {
                    b.HasOne("WhiteSandsMVC.Models.BillOfSale", "BillOfSale")
                        .WithMany()
                        .HasForeignKey("BillOfSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WhiteSandsMVC.Models.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WhiteSandsMVC.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WhiteSandsMVC.Models.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WhiteSandsMVC.Models.LineItemCharge", b =>
                {
                    b.HasOne("WhiteSandsMVC.Models.BillOfSale", "BillOfSale")
                        .WithMany()
                        .HasForeignKey("BillOfSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WhiteSandsMVC.Models.UserFoodInterest", b =>
                {
                    b.HasOne("WhiteSandsMVC.Models.FoodInterest", "Interest")
                        .WithMany()
                        .HasForeignKey("FoodInterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WhiteSandsMVC.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WhiteSandsMVC.Models.UserHealthInterest", b =>
                {
                    b.HasOne("WhiteSandsMVC.Models.HealthInterest", "Interest")
                        .WithMany()
                        .HasForeignKey("HealthInterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WhiteSandsMVC.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WhiteSandsMVC.Models.UserTravelInterest", b =>
                {
                    b.HasOne("WhiteSandsMVC.Models.TravelInterest", "Interest")
                        .WithMany()
                        .HasForeignKey("TravelInterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WhiteSandsMVC.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
